; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart.d --cpu=Cortex-M0 --apcs=interwork -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC131\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -D__MICROLIB --omf_browse=.\obj\uart.crf ..\..\..\Library\StdDriver\src\uart.c]
                          THUMB

                          AREA ||i.CLK_GetPLLClockFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetPLLClockFreq PROC
;;;289      */
;;;290    __STATIC_INLINE uint32_t CLK_GetPLLClockFreq(void)
000000  b508              PUSH     {r3,lr}
;;;291    {
;;;292        uint32_t u32PllFreq = 0, u32PllReg;
;;;293        uint32_t u32FIN, u32NF, u32NR, u32NO;
;;;294        uint8_t au8NoTbl[4] = {1, 2, 2, 4};
000002  a011              ADR      r0,|L1.72|
000004  6800              LDR      r0,[r0,#0]
;;;295    
;;;296        u32PllReg = CLK->PLLCON;
000006  9000              STR      r0,[sp,#0]
000008  4810              LDR      r0,|L1.76|
00000a  6a01              LDR      r1,[r0,#0x20]
;;;297    
;;;298        if(u32PllReg & (CLK_PLLCON_PD_Msk | CLK_PLLCON_OE_Msk))
00000c  1300              ASRS     r0,r0,#12
00000e  4201              TST      r1,r0
000010  d001              BEQ      |L1.22|
;;;299            return 0;           /* PLL is in power down mode or fix low */
000012  2000              MOVS     r0,#0
                  |L1.20|
;;;300    
;;;301        if(u32PllReg & CLK_PLLCON_PLL_SRC_HIRC)
;;;302            u32FIN = __HIRC;    /* PLL source clock from HIRC */
;;;303        else
;;;304            u32FIN = __HXT;     /* PLL source clock from HXT */
;;;305    
;;;306        if(u32PllReg & CLK_PLLCON_BP_Msk)
;;;307            return u32FIN;      /* PLL is in bypass mode */
;;;308    
;;;309        /* PLL is output enabled in normal work mode */
;;;310        u32NO = au8NoTbl[((u32PllReg & CLK_PLLCON_OUT_DV_Msk) >> CLK_PLLCON_OUT_DV_Pos)];
;;;311        u32NF = ((u32PllReg & CLK_PLLCON_FB_DV_Msk) >> CLK_PLLCON_FB_DV_Pos) + 2;
;;;312        u32NR = ((u32PllReg & CLK_PLLCON_IN_DV_Msk) >> CLK_PLLCON_IN_DV_Pos) + 2;
;;;313    
;;;314        /* u32FIN is shifted 2 bits to avoid overflow */
;;;315        u32PllFreq = (((u32FIN >> 2) * u32NF) / (u32NR * u32NO) << 2);
;;;316    
;;;317        return u32PllFreq;
;;;318    }
000014  bd08              POP      {r3,pc}
                  |L1.22|
000016  0308              LSLS     r0,r1,#12             ;301
000018  d501              BPL      |L1.30|
00001a  480d              LDR      r0,|L1.80|
00001c  e000              B        |L1.32|
                  |L1.30|
00001e  480d              LDR      r0,|L1.84|
                  |L1.32|
000020  038a              LSLS     r2,r1,#14             ;306
000022  d4f7              BMI      |L1.20|
000024  040a              LSLS     r2,r1,#16             ;310
000026  0f92              LSRS     r2,r2,#30             ;310
000028  466b              MOV      r3,sp                 ;310
00002a  5c9b              LDRB     r3,[r3,r2]            ;310
00002c  05ca              LSLS     r2,r1,#23             ;311
00002e  0489              LSLS     r1,r1,#18             ;312
000030  0dd2              LSRS     r2,r2,#23             ;311
000032  0ec9              LSRS     r1,r1,#27             ;312
000034  1c89              ADDS     r1,r1,#2              ;312
000036  0880              LSRS     r0,r0,#2              ;315
000038  1c92              ADDS     r2,r2,#2              ;315
00003a  4359              MULS     r1,r3,r1              ;315
00003c  4350              MULS     r0,r2,r0              ;315
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  0080              LSLS     r0,r0,#2              ;315
000044  bd08              POP      {r3,pc}
;;;319    
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
000048  01020204          DCB      1,2,2,4
                  |L1.76|
                          DCD      0x50000200
                  |L1.80|
                          DCD      0x01518000
                  |L1.84|
                          DCD      0x00b71b00

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;515     */
;;;516    __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c1              LSLS     r1,r0,#27
;;;517    {
;;;518      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
000002  0ec9              LSRS     r1,r1,#27
000004  2001              MOVS     r0,#1
000006  4088              LSLS     r0,r0,r1
000008  4901              LDR      r1,|L2.16|
00000a  6008              STR      r0,[r1,#0]
;;;519    }
00000c  4770              BX       lr
;;;520    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;503     */
;;;504    __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c1              LSLS     r1,r0,#27
;;;505    {
;;;506      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
000002  0ec9              LSRS     r1,r1,#27
000004  2001              MOVS     r0,#1
000006  4088              LSLS     r0,r0,r1
000008  4901              LDR      r1,|L3.16|
00000a  6008              STR      r0,[r1,#0]
;;;507    }
00000c  4770              BX       lr
;;;508    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0xe000e100

                          AREA ||i.UART_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  UART_ClearIntFlag PROC
;;;42      */
;;;43     void UART_ClearIntFlag(UART_T* uart , uint32_t u32InterruptFlag)
000000  054a              LSLS     r2,r1,#21
;;;44     {
000002  d503              BPL      |L4.12|
;;;45     
;;;46         if(u32InterruptFlag & UART_ISR_RLS_INT_Msk)   /* clear Receive Line Status Interrupt */
;;;47         {
;;;48             uart->FSR = UART_FSR_BIF_Msk | UART_FSR_FEF_Msk | UART_FSR_PEF_Msk;
000004  2270              MOVS     r2,#0x70
000006  6182              STR      r2,[r0,#0x18]
;;;49             uart->FSR = UART_FSR_RS485_ADD_DETF_Msk;
000008  2208              MOVS     r2,#8
00000a  6182              STR      r2,[r0,#0x18]
                  |L4.12|
;;;50         }
;;;51     
;;;52         if(u32InterruptFlag & UART_ISR_MODEM_INT_Msk)  /* clear Modem Interrupt */
00000c  050a              LSLS     r2,r1,#20
00000e  d503              BPL      |L4.24|
;;;53             uart->MSR |= UART_MSR_DCTSF_Msk;
000010  6942              LDR      r2,[r0,#0x14]
000012  2301              MOVS     r3,#1
000014  431a              ORRS     r2,r2,r3
000016  6142              STR      r2,[r0,#0x14]
                  |L4.24|
;;;54     
;;;55         if(u32InterruptFlag & UART_ISR_BUF_ERR_INT_Msk)   /* clear Buffer Error Interrupt */
000018  048a              LSLS     r2,r1,#18
00001a  d501              BPL      |L4.32|
;;;56         {
;;;57             uart->FSR = UART_FSR_RX_OVER_IF_Msk | UART_FSR_TX_OVER_IF_Msk;
00001c  4a09              LDR      r2,|L4.68|
00001e  6182              STR      r2,[r0,#0x18]
                  |L4.32|
;;;58         }
;;;59     
;;;60         if(u32InterruptFlag & UART_ISR_CTSWKIF_Msk)   /* clear CTS Wake-up Interrupt */
000020  03ca              LSLS     r2,r1,#15
000022  d502              BPL      |L4.42|
;;;61         {
;;;62             uart->ISR = UART_ISR_CTSWKIF_Msk;
000024  2201              MOVS     r2,#1
000026  0412              LSLS     r2,r2,#16
000028  61c2              STR      r2,[r0,#0x1c]
                  |L4.42|
;;;63         }
;;;64     
;;;65         if(u32InterruptFlag & UART_ISR_DATWKIF_Msk)   /* clear Data Wake-up Interrupt */
00002a  038a              LSLS     r2,r1,#14
00002c  d502              BPL      |L4.52|
;;;66         {
;;;67             uart->ISR = UART_ISR_DATWKIF_Msk;
00002e  2201              MOVS     r2,#1
000030  0452              LSLS     r2,r2,#17
000032  61c2              STR      r2,[r0,#0x1c]
                  |L4.52|
;;;68         }
;;;69     
;;;70         if(u32InterruptFlag & UART_ISR_LIN_INT_Msk)   /* clear LIN bus Interrupt */
000034  0409              LSLS     r1,r1,#16
000036  d503              BPL      |L4.64|
;;;71         {
;;;72             uart->ISR = UART_ISR_LIN_IF_Msk;
000038  2180              MOVS     r1,#0x80
00003a  61c1              STR      r1,[r0,#0x1c]
;;;73             uart->LIN_SR = UART_LIN_SR_BIT_ERR_F_Msk   | UART_LIN_SR_LINS_BKDET_F_Msk  |
00003c  4902              LDR      r1,|L4.72|
00003e  6381              STR      r1,[r0,#0x38]
                  |L4.64|
;;;74                            UART_LIN_SR_LINS_SYNC_F_Msk | UART_LIN_SR_LINS_IDPERR_F_Msk |
;;;75                            UART_LIN_SR_LINS_HERR_F_Msk | UART_LIN_SR_LINS_HDET_F_Msk ;
;;;76         }
;;;77     
;;;78     }
000040  4770              BX       lr
;;;79     
                          ENDP

000042  0000              DCW      0x0000
                  |L4.68|
                          DCD      0x01000001
                  |L4.72|
                          DCD      0x0000030f

                          AREA ||i.UART_Close||, CODE, READONLY, ALIGN=1

                  UART_Close PROC
;;;88      */
;;;89     void UART_Close(UART_T* uart)
000000  2100              MOVS     r1,#0
;;;90     {
;;;91         uart->IER = 0;
000002  6041              STR      r1,[r0,#4]
;;;92     }
000004  4770              BX       lr
;;;93     
                          ENDP


                          AREA ||i.UART_DisableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_DisableFlowCtrl PROC
;;;103     */
;;;104    void UART_DisableFlowCtrl(UART_T* uart)
000000  6841              LDR      r1,[r0,#4]
;;;105    {
;;;106        uart->IER &= ~(UART_IER_AUTO_RTS_EN_Msk | UART_IER_AUTO_CTS_EN_Msk);
000002  2203              MOVS     r2,#3
000004  0312              LSLS     r2,r2,#12
000006  4391              BICS     r1,r1,r2
000008  6041              STR      r1,[r0,#4]
;;;107    }
00000a  4770              BX       lr
;;;108    
                          ENDP


                          AREA ||i.UART_DisableInt||, CODE, READONLY, ALIGN=2

                  UART_DisableInt PROC
;;;128     */
;;;129    void UART_DisableInt(UART_T*  uart, uint32_t u32InterruptFlag)
000000  b510              PUSH     {r4,lr}
;;;130    {
;;;131        /* Disable UART specified interrupt */
;;;132        UART_DISABLE_INT(uart, u32InterruptFlag);
000002  6842              LDR      r2,[r0,#4]
000004  438a              BICS     r2,r2,r1
000006  6042              STR      r2,[r0,#4]
;;;133    
;;;134        /* Disable NVIC UART IRQ */
;;;135        if(uart == UART0)
000008  490d              LDR      r1,|L7.64|
00000a  4288              CMP      r0,r1
00000c  d009              BEQ      |L7.34|
;;;136            NVIC_DisableIRQ(UART02_IRQn);
;;;137        else if(uart == UART1)
00000e  490d              LDR      r1,|L7.68|
000010  4288              CMP      r0,r1
000012  d103              BNE      |L7.28|
;;;138            NVIC_DisableIRQ(UART1_IRQn);
000014  200d              MOVS     r0,#0xd
                  |L7.22|
000016  f7fffffe          BL       NVIC_DisableIRQ
;;;139        else if(uart == UART2)
;;;140            NVIC_DisableIRQ(UART02_IRQn);
;;;141        else if(uart == UART3)
;;;142            NVIC_DisableIRQ(UART3_IRQn);
;;;143        else if(uart == UART4)
;;;144            NVIC_DisableIRQ(UART4_IRQn);
;;;145        else
;;;146            NVIC_DisableIRQ(UART5_IRQn);
;;;147    }
00001a  bd10              POP      {r4,pc}
                  |L7.28|
00001c  490a              LDR      r1,|L7.72|
00001e  4288              CMP      r0,r1                 ;139
000020  d101              BNE      |L7.38|
                  |L7.34|
000022  200c              MOVS     r0,#0xc               ;140
000024  e7f7              B        |L7.22|
                  |L7.38|
000026  4909              LDR      r1,|L7.76|
000028  4288              CMP      r0,r1                 ;141
00002a  d101              BNE      |L7.48|
00002c  200f              MOVS     r0,#0xf               ;142
00002e  e7f2              B        |L7.22|
                  |L7.48|
000030  4907              LDR      r1,|L7.80|
000032  4288              CMP      r0,r1                 ;143
000034  d101              BNE      |L7.58|
000036  2010              MOVS     r0,#0x10              ;144
000038  e7ed              B        |L7.22|
                  |L7.58|
00003a  2011              MOVS     r0,#0x11              ;146
00003c  e7eb              B        |L7.22|
;;;148    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      0x40050000
                  |L7.68|
                          DCD      0x40150000
                  |L7.72|
                          DCD      0x40154000
                  |L7.76|
                          DCD      0x40054000
                  |L7.80|
                          DCD      0x40058000

                          AREA ||i.UART_EnableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_EnableFlowCtrl PROC
;;;158     */
;;;159    void UART_EnableFlowCtrl(UART_T* uart)
000000  6901              LDR      r1,[r0,#0x10]
;;;160    {
;;;161        /* Set RTS pin output is low level active */
;;;162        uart->MCR |= UART_MCR_LEV_RTS_Msk;
000002  2201              MOVS     r2,#1
000004  0252              LSLS     r2,r2,#9
000006  4311              ORRS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;163    
;;;164        /* Set CTS pin input is low level active */
;;;165        uart->MSR |= UART_MSR_LEV_CTS_Msk;
00000a  6941              LDR      r1,[r0,#0x14]
00000c  1052              ASRS     r2,r2,#1
00000e  4311              ORRS     r1,r1,r2
000010  6141              STR      r1,[r0,#0x14]
;;;166    
;;;167        /* Set RTS and CTS auto flow control enable */
;;;168        uart->IER |= UART_IER_AUTO_RTS_EN_Msk | UART_IER_AUTO_CTS_EN_Msk;
000012  6841              LDR      r1,[r0,#4]
000014  2203              MOVS     r2,#3
000016  0312              LSLS     r2,r2,#12
000018  4311              ORRS     r1,r1,r2
00001a  6041              STR      r1,[r0,#4]
;;;169    }
00001c  4770              BX       lr
;;;170    
                          ENDP


                          AREA ||i.UART_EnableInt||, CODE, READONLY, ALIGN=2

                  UART_EnableInt PROC
;;;190     */
;;;191    void UART_EnableInt(UART_T*  uart, uint32_t u32InterruptFlag)
000000  b510              PUSH     {r4,lr}
;;;192    {
;;;193    
;;;194        /* Enable UART specified interrupt */
;;;195        UART_ENABLE_INT(uart, u32InterruptFlag);
000002  6842              LDR      r2,[r0,#4]
000004  430a              ORRS     r2,r2,r1
000006  6042              STR      r2,[r0,#4]
;;;196    
;;;197        /* Enable NVIC UART IRQ */
;;;198        if(uart == UART0)
000008  490d              LDR      r1,|L9.64|
00000a  4288              CMP      r0,r1
00000c  d009              BEQ      |L9.34|
;;;199            NVIC_EnableIRQ(UART02_IRQn);
;;;200        else if(uart == UART1)
00000e  490d              LDR      r1,|L9.68|
000010  4288              CMP      r0,r1
000012  d103              BNE      |L9.28|
;;;201            NVIC_EnableIRQ(UART1_IRQn);
000014  200d              MOVS     r0,#0xd
                  |L9.22|
000016  f7fffffe          BL       NVIC_EnableIRQ
;;;202        else if(uart == UART2)
;;;203            NVIC_EnableIRQ(UART02_IRQn);
;;;204        else if(uart == UART3)
;;;205            NVIC_EnableIRQ(UART3_IRQn);
;;;206        else if(uart == UART4)
;;;207            NVIC_EnableIRQ(UART4_IRQn);
;;;208        else
;;;209            NVIC_EnableIRQ(UART5_IRQn);
;;;210    
;;;211    }
00001a  bd10              POP      {r4,pc}
                  |L9.28|
00001c  490a              LDR      r1,|L9.72|
00001e  4288              CMP      r0,r1                 ;202
000020  d101              BNE      |L9.38|
                  |L9.34|
000022  200c              MOVS     r0,#0xc               ;203
000024  e7f7              B        |L9.22|
                  |L9.38|
000026  4909              LDR      r1,|L9.76|
000028  4288              CMP      r0,r1                 ;204
00002a  d101              BNE      |L9.48|
00002c  200f              MOVS     r0,#0xf               ;205
00002e  e7f2              B        |L9.22|
                  |L9.48|
000030  4907              LDR      r1,|L9.80|
000032  4288              CMP      r0,r1                 ;206
000034  d101              BNE      |L9.58|
000036  2010              MOVS     r0,#0x10              ;207
000038  e7ed              B        |L9.22|
                  |L9.58|
00003a  2011              MOVS     r0,#0x11              ;209
00003c  e7eb              B        |L9.22|
;;;212    
                          ENDP

00003e  0000              DCW      0x0000
                  |L9.64|
                          DCD      0x40050000
                  |L9.68|
                          DCD      0x40150000
                  |L9.72|
                          DCD      0x40154000
                  |L9.76|
                          DCD      0x40054000
                  |L9.80|
                          DCD      0x40058000

                          AREA ||i.UART_Open||, CODE, READONLY, ALIGN=2

                  UART_Open PROC
;;;223     */
;;;224    void UART_Open(UART_T* uart, uint32_t u32baudrate)
000000  b5f0              PUSH     {r4-r7,lr}
;;;225    {
000002  4604              MOV      r4,r0
;;;226        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;227        uint32_t u32ClkTbl[4] = {__HXT, 0, 0, __HIRC};
000004  481c              LDR      r0,|L10.120|
000006  460d              MOV      r5,r1                 ;225
000008  c80f              LDM      r0,{r0-r3}
00000a  b085              SUB      sp,sp,#0x14           ;225
00000c  466e              MOV      r6,sp
00000e  c60f              STM      r6!,{r0-r3}
;;;228        uint32_t u32Baud_Div = 0;
;;;229    
;;;230        /* Get UART clock source selection */
;;;231        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000010  481a              LDR      r0,|L10.124|
000012  6941              LDR      r1,[r0,#0x14]
;;;232    
;;;233        /* Get UART clock divider number */
;;;234        u8UartClkDivNum = (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos;
000014  6980              LDR      r0,[r0,#0x18]
;;;235    
;;;236        /* Select UART function */
;;;237        uart->FUN_SEL = UART_FUNC_SEL_UART;
;;;238    
;;;239        /* Set UART line configuration */
;;;240        uart->LCR = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
;;;241    
;;;242        /* Set UART Rx and RTS trigger level */
;;;243        uart->FCR &= ~(UART_FCR_RFITL_Msk | UART_FCR_RTS_TRI_LEV_Msk);
;;;244    
;;;245        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;246        if(u8UartClkSrcSel == 1)
;;;247            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;248    
;;;249        /* Set UART baud rate */
;;;250        if(u32baudrate != 0)
;;;251        {
;;;252            u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate);
;;;253    
;;;254            if(u32Baud_Div > 0xFFFF)
;;;255                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate));
;;;256            else
;;;257                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;258        }
;;;259    }
000016  018a              LSLS     r2,r1,#6
000018  2103              MOVS     r1,#3
00001a  0f96              LSRS     r6,r2,#30
00001c  0500              LSLS     r0,r0,#20
00001e  0f07              LSRS     r7,r0,#28
000020  2000              MOVS     r0,#0                 ;237
000022  6320              STR      r0,[r4,#0x30]         ;237
000024  60e1              STR      r1,[r4,#0xc]          ;240
000026  68a0              LDR      r0,[r4,#8]            ;243
000028  4915              LDR      r1,|L10.128|
00002a  4008              ANDS     r0,r0,r1              ;243
00002c  60a0              STR      r0,[r4,#8]            ;243
00002e  2e01              CMP      r6,#1                 ;246
000030  d102              BNE      |L10.56|
000032  f7fffffe          BL       CLK_GetPLLClockFreq
000036  9001              STR      r0,[sp,#4]            ;247
                  |L10.56|
000038  2d00              CMP      r5,#0                 ;250
00003a  d01b              BEQ      |L10.116|
00003c  00b1              LSLS     r1,r6,#2              ;252
00003e  4668              MOV      r0,sp                 ;252
000040  5840              LDR      r0,[r0,r1]            ;252
000042  1c79              ADDS     r1,r7,#1              ;252
000044  f7fffffe          BL       __aeabi_uidivmod
000048  4606              MOV      r6,r0                 ;252
00004a  0869              LSRS     r1,r5,#1              ;252
00004c  1840              ADDS     r0,r0,r1              ;252
00004e  4629              MOV      r1,r5                 ;252
000050  f7fffffe          BL       __aeabi_uidivmod
000054  490b              LDR      r1,|L10.132|
000056  1e80              SUBS     r0,r0,#2              ;254
000058  4288              CMP      r0,r1                 ;254
00005a  d907              BLS      |L10.108|
00005c  00e9              LSLS     r1,r5,#3              ;255
00005e  1870              ADDS     r0,r6,r1              ;255
000060  4629              MOV      r1,r5                 ;255
000062  f7fffffe          BL       __aeabi_uidivmod
000066  0900              LSRS     r0,r0,#4              ;255
000068  1e80              SUBS     r0,r0,#2              ;255
00006a  e002              B        |L10.114|
                  |L10.108|
00006c  2103              MOVS     r1,#3                 ;257
00006e  0709              LSLS     r1,r1,#28             ;257
000070  4308              ORRS     r0,r0,r1              ;257
                  |L10.114|
000072  6260              STR      r0,[r4,#0x24]         ;257
                  |L10.116|
000074  b005              ADD      sp,sp,#0x14
000076  bdf0              POP      {r4-r7,pc}
;;;260    
                          ENDP

                  |L10.120|
                          DCD      ||.constdata||
                  |L10.124|
                          DCD      0x50000200
                  |L10.128|
                          DCD      0xfff0ff0f
                  |L10.132|
                          DCD      0x0000ffff

                          AREA ||i.UART_Read||, CODE, READONLY, ALIGN=1

                  UART_Read PROC
;;;272     */
;;;273    uint32_t UART_Read(UART_T* uart, uint8_t *pu8RxBuf, uint32_t u32ReadBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;274    {
000002  4604              MOV      r4,r0
;;;275        uint32_t  u32Count, u32delayno;
;;;276    
;;;277        for(u32Count = 0; u32Count < u32ReadBytes; u32Count++)
000004  2000              MOVS     r0,#0
;;;278        {
;;;279            u32delayno = 0;
;;;280    
;;;281            while(uart->FSR & UART_FSR_RX_EMPTY_Msk)   /* Check RX empty => failed */
;;;282            {
;;;283                u32delayno++;
;;;284                if(u32delayno >= 0x40000000)
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L11.38|
                  |L11.12|
00000c  2300              MOVS     r3,#0                 ;279
00000e  e004              B        |L11.26|
                  |L11.16|
000010  1c5b              ADDS     r3,r3,#1              ;281
000012  42ab              CMP      r3,r5
000014  d301              BCC      |L11.26|
;;;285                    return FALSE;
000016  2000              MOVS     r0,#0
;;;286            }
;;;287            pu8RxBuf[u32Count] = uart->RBR;    /* Get Data from UART RX  */
;;;288        }
;;;289    
;;;290        return u32Count;
;;;291    
;;;292    }
000018  bd70              POP      {r4-r6,pc}
                  |L11.26|
00001a  69a6              LDR      r6,[r4,#0x18]         ;281
00001c  0476              LSLS     r6,r6,#17             ;281
00001e  d4f7              BMI      |L11.16|
000020  6823              LDR      r3,[r4,#0]            ;287
000022  540b              STRB     r3,[r1,r0]            ;287
000024  1c40              ADDS     r0,r0,#1              ;287
                  |L11.38|
000026  4290              CMP      r0,r2                 ;277
000028  d3f0              BCC      |L11.12|
00002a  bd70              POP      {r4-r6,pc}
;;;293    
                          ENDP


                          AREA ||i.UART_SelectIrDAMode||, CODE, READONLY, ALIGN=2

                  UART_SelectIrDAMode PROC
;;;386     */
;;;387    void UART_SelectIrDAMode(UART_T* uart, uint32_t u32Buadrate, uint32_t u32Direction)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;388    {
000002  4604              MOV      r4,r0
;;;389        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;390        uint32_t u32ClkTbl[4] = {__HXT, 0, 0, __HIRC};
000004  481c              LDR      r0,|L12.120|
000006  b084              SUB      sp,sp,#0x10           ;388
000008  c80f              LDM      r0,{r0-r3}
;;;391        uint32_t u32Baud_Div;
;;;392    
;;;393        /* Select IrDA function mode */
;;;394        uart->FUN_SEL = UART_FUNC_SEL_IrDA;
00000a  466d              MOV      r5,sp
00000c  c50f              STM      r5!,{r0-r3}
00000e  2602              MOVS     r6,#2
000010  6326              STR      r6,[r4,#0x30]
;;;395    
;;;396        /* Get UART clock source selection */
;;;397        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000012  481a              LDR      r0,|L12.124|
000014  6941              LDR      r1,[r0,#0x14]
;;;398    
;;;399        /* Get UART clock divider number */
;;;400        u8UartClkDivNum = (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos;
000016  6980              LDR      r0,[r0,#0x18]
;;;401    
;;;402        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;403        if(u8UartClkSrcSel == 1)
;;;404            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;405    
;;;406        /* Set UART IrDA baud rate in mode 0 */
;;;407        if(u32Buadrate != 0)
;;;408        {
;;;409            u32Baud_Div = UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32Buadrate);
;;;410    
;;;411            if(u32Baud_Div < 0xFFFF)
;;;412                uart->BAUD = (UART_BAUD_MODE0 | u32Baud_Div);
;;;413        }
;;;414    
;;;415        /* Configure IrDA relative settings */
;;;416        if(u32Direction == UART_IRCR_RX_SELECT)
;;;417        {
;;;418            uart->IRCR |= UART_IRCR_INV_RX_Msk;     //Rx signal is inverse
;;;419            uart->IRCR &= ~UART_IRCR_TX_SELECT_Msk;
;;;420        }
;;;421        else
;;;422        {
;;;423            uart->IRCR &= ~UART_IRCR_INV_TX_Msk;    //Tx signal is not inverse
;;;424            uart->IRCR |= UART_IRCR_TX_SELECT_Msk;
;;;425        }
;;;426    }
000018  0189              LSLS     r1,r1,#6
00001a  0f8d              LSRS     r5,r1,#30
00001c  0500              LSLS     r0,r0,#20
00001e  0f07              LSRS     r7,r0,#28
000020  2d01              CMP      r5,#1                 ;403
000022  d102              BNE      |L12.42|
000024  f7fffffe          BL       CLK_GetPLLClockFreq
000028  9001              STR      r0,[sp,#4]            ;404
                  |L12.42|
00002a  9805              LDR      r0,[sp,#0x14]         ;407
00002c  2800              CMP      r0,#0                 ;407
00002e  d011              BEQ      |L12.84|
000030  00a9              LSLS     r1,r5,#2              ;409
000032  4668              MOV      r0,sp                 ;409
000034  5840              LDR      r0,[r0,r1]            ;409
000036  1c79              ADDS     r1,r7,#1              ;409
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  9905              LDR      r1,[sp,#0x14]         ;409
00003e  00c9              LSLS     r1,r1,#3              ;409
000040  1840              ADDS     r0,r0,r1              ;409
000042  9905              LDR      r1,[sp,#0x14]         ;409
000044  f7fffffe          BL       __aeabi_uidivmod
000048  0900              LSRS     r0,r0,#4              ;409
00004a  490d              LDR      r1,|L12.128|
00004c  1e80              SUBS     r0,r0,#2              ;411
00004e  4288              CMP      r0,r1                 ;411
000050  d200              BCS      |L12.84|
000052  6260              STR      r0,[r4,#0x24]         ;412
                  |L12.84|
000054  9806              LDR      r0,[sp,#0x18]         ;416
000056  2800              CMP      r0,#0                 ;416
000058  6aa0              LDR      r0,[r4,#0x28]         ;423
00005a  d007              BEQ      |L12.108|
00005c  2120              MOVS     r1,#0x20              ;423
00005e  4388              BICS     r0,r0,r1              ;423
000060  62a0              STR      r0,[r4,#0x28]         ;423
000062  6aa0              LDR      r0,[r4,#0x28]         ;424
000064  4330              ORRS     r0,r0,r6              ;424
                  |L12.102|
000066  62a0              STR      r0,[r4,#0x28]         ;419
000068  b007              ADD      sp,sp,#0x1c
00006a  bdf0              POP      {r4-r7,pc}
                  |L12.108|
00006c  2140              MOVS     r1,#0x40              ;418
00006e  4308              ORRS     r0,r0,r1              ;418
000070  62a0              STR      r0,[r4,#0x28]         ;418
000072  6aa0              LDR      r0,[r4,#0x28]         ;419
000074  43b0              BICS     r0,r0,r6              ;419
000076  e7f6              B        |L12.102|
;;;427    
                          ENDP

                  |L12.120|
                          DCD      ||.constdata||+0x20
                  |L12.124|
                          DCD      0x50000200
                  |L12.128|
                          DCD      0x0000ffff

                          AREA ||i.UART_SelectLINMode||, CODE, READONLY, ALIGN=1

                  UART_SelectLINMode PROC
;;;467     */
;;;468    void UART_SelectLINMode(UART_T* uart, uint32_t u32Mode, uint32_t u32BreakLength)
000000  b510              PUSH     {r4,lr}
;;;469    {
;;;470        /* Select LIN function mode */
;;;471        uart->FUN_SEL = UART_FUNC_SEL_LIN;
000002  2301              MOVS     r3,#1
000004  6303              STR      r3,[r0,#0x30]
;;;472    
;;;473        /* Select LIN function setting : Tx enable, Rx enable and break field length */
;;;474        uart->ALT_CSR &= ~(UART_ALT_CSR_LIN_TX_EN_Msk | UART_ALT_CSR_LIN_RX_EN_Msk | UART_ALT_CSR_UA_LIN_BKFL_Msk);
000006  6ac3              LDR      r3,[r0,#0x2c]
000008  24cf              MOVS     r4,#0xcf
00000a  43a3              BICS     r3,r3,r4
00000c  62c3              STR      r3,[r0,#0x2c]
;;;475        uart->ALT_CSR |= (u32Mode | (u32BreakLength << UART_ALT_CSR_UA_LIN_BKFL_Pos));
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  4311              ORRS     r1,r1,r2
000012  430b              ORRS     r3,r3,r1
000014  62c3              STR      r3,[r0,#0x2c]
;;;476    }
000016  bd10              POP      {r4,pc}
;;;477    
                          ENDP


                          AREA ||i.UART_SelectRS485Mode||, CODE, READONLY, ALIGN=2

                  UART_SelectRS485Mode PROC
;;;442     */
;;;443    void UART_SelectRS485Mode(UART_T* uart, uint32_t u32Mode, uint32_t u32Addr)
000000  b510              PUSH     {r4,lr}
;;;444    {
;;;445        /* Select UART RS485 function mode */
;;;446        uart->FUN_SEL = UART_FUNC_SEL_RS485;
000002  2303              MOVS     r3,#3
000004  6303              STR      r3,[r0,#0x30]
;;;447    
;;;448        /* Set RS585 configuration */
;;;449        uart->ALT_CSR &= ~(UART_ALT_CSR_RS485_NMM_Msk | UART_ALT_CSR_RS485_AUD_Msk | UART_ALT_CSR_RS485_AAD_Msk | UART_ALT_CSR_ADDR_MATCH_Msk);
000006  6ac3              LDR      r3,[r0,#0x2c]
000008  4c04              LDR      r4,|L14.28|
00000a  4023              ANDS     r3,r3,r4
00000c  62c3              STR      r3,[r0,#0x2c]
;;;450        uart->ALT_CSR |= (u32Mode | (u32Addr << UART_ALT_CSR_ADDR_MATCH_Pos));
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  0612              LSLS     r2,r2,#24
000012  430a              ORRS     r2,r2,r1
000014  4313              ORRS     r3,r3,r2
000016  62c3              STR      r3,[r0,#0x2c]
;;;451    }
000018  bd10              POP      {r4,pc}
;;;452    
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
                          DCD      0x00fff8ff

                          AREA ||i.UART_SetLine_Config||, CODE, READONLY, ALIGN=2

                  UART_SetLine_Config PROC
;;;321     */
;;;322    void UART_SetLine_Config(UART_T* uart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t  u32stop_bits)
000000  b5ff              PUSH     {r0-r7,lr}
;;;323    {
000002  4605              MOV      r5,r0
;;;324        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;325        uint32_t u32ClkTbl[4] = {__HXT, 0, 0, __HIRC};
000004  481b              LDR      r0,|L15.116|
000006  460c              MOV      r4,r1                 ;323
000008  c80f              LDM      r0,{r0-r3}
00000a  b085              SUB      sp,sp,#0x14           ;323
00000c  466e              MOV      r6,sp
00000e  c60f              STM      r6!,{r0-r3}
;;;326        uint32_t u32Baud_Div = 0;
;;;327    
;;;328        /* Get UART clock source selection */
;;;329        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000010  4819              LDR      r0,|L15.120|
000012  6941              LDR      r1,[r0,#0x14]
;;;330    
;;;331        /* Get UART clock divider number */
;;;332        u8UartClkDivNum = (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos;
000014  6980              LDR      r0,[r0,#0x18]
;;;333    
;;;334        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;335        if(u8UartClkSrcSel == 1)
;;;336            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;337    
;;;338        /* Set UART baud rate */
;;;339        if(u32baudrate != 0)
;;;340        {
;;;341            u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate);
;;;342    
;;;343            if(u32Baud_Div > 0xFFFF)
;;;344                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate));
;;;345            else
;;;346                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;347        }
;;;348    
;;;349        /* Set UART line configuration */
;;;350        uart->LCR = u32data_width | u32parity | u32stop_bits;
;;;351    }
000016  0189              LSLS     r1,r1,#6
000018  0f8e              LSRS     r6,r1,#30
00001a  0500              LSLS     r0,r0,#20
00001c  0f07              LSRS     r7,r0,#28
00001e  2e01              CMP      r6,#1                 ;335
000020  d102              BNE      |L15.40|
000022  f7fffffe          BL       CLK_GetPLLClockFreq
000026  9001              STR      r0,[sp,#4]            ;336
                  |L15.40|
000028  2c00              CMP      r4,#0                 ;339
00002a  d01b              BEQ      |L15.100|
00002c  00b1              LSLS     r1,r6,#2              ;341
00002e  4668              MOV      r0,sp                 ;341
000030  5840              LDR      r0,[r0,r1]            ;341
000032  1c79              ADDS     r1,r7,#1              ;341
000034  f7fffffe          BL       __aeabi_uidivmod
000038  4606              MOV      r6,r0                 ;341
00003a  0861              LSRS     r1,r4,#1              ;341
00003c  1840              ADDS     r0,r0,r1              ;341
00003e  4621              MOV      r1,r4                 ;341
000040  f7fffffe          BL       __aeabi_uidivmod
000044  490d              LDR      r1,|L15.124|
000046  1e80              SUBS     r0,r0,#2              ;343
000048  4288              CMP      r0,r1                 ;343
00004a  d907              BLS      |L15.92|
00004c  00e1              LSLS     r1,r4,#3              ;344
00004e  1870              ADDS     r0,r6,r1              ;344
000050  4621              MOV      r1,r4                 ;344
000052  f7fffffe          BL       __aeabi_uidivmod
000056  0900              LSRS     r0,r0,#4              ;344
000058  1e80              SUBS     r0,r0,#2              ;344
00005a  e002              B        |L15.98|
                  |L15.92|
00005c  2103              MOVS     r1,#3                 ;346
00005e  0709              LSLS     r1,r1,#28             ;346
000060  4308              ORRS     r0,r0,r1              ;346
                  |L15.98|
000062  6268              STR      r0,[r5,#0x24]         ;344
                  |L15.100|
000064  9908              LDR      r1,[sp,#0x20]         ;350
000066  9807              LDR      r0,[sp,#0x1c]         ;350
000068  4308              ORRS     r0,r0,r1              ;350
00006a  990e              LDR      r1,[sp,#0x38]         ;350
00006c  4308              ORRS     r0,r0,r1              ;350
00006e  60e8              STR      r0,[r5,#0xc]          ;350
000070  b009              ADD      sp,sp,#0x24
000072  bdf0              POP      {r4-r7,pc}
;;;352    
                          ENDP

                  |L15.116|
                          DCD      ||.constdata||+0x10
                  |L15.120|
                          DCD      0x50000200
                  |L15.124|
                          DCD      0x0000ffff

                          AREA ||i.UART_SetTimeoutCnt||, CODE, READONLY, ALIGN=1

                  UART_SetTimeoutCnt PROC
;;;363     */
;;;364    void UART_SetTimeoutCnt(UART_T* uart, uint32_t u32TOC)
000000  6a02              LDR      r2,[r0,#0x20]
;;;365    {
;;;366        /* Set time-out interrupt comparator */
;;;367        uart->TOR = (uart->TOR & ~UART_TOR_TOIC_Msk) | (u32TOC);
000002  0a12              LSRS     r2,r2,#8
000004  0212              LSLS     r2,r2,#8
000006  430a              ORRS     r2,r2,r1
000008  6202              STR      r2,[r0,#0x20]
;;;368    
;;;369        /* Set time-out counter enable */
;;;370        uart->IER |= UART_IER_TIME_OUT_EN_Msk;
00000a  6841              LDR      r1,[r0,#4]
00000c  2201              MOVS     r2,#1
00000e  02d2              LSLS     r2,r2,#11
000010  4311              ORRS     r1,r1,r2
000012  6041              STR      r1,[r0,#4]
;;;371    }
000014  4770              BX       lr
;;;372    
                          ENDP


                          AREA ||i.UART_Write||, CODE, READONLY, ALIGN=1

                  UART_Write PROC
;;;489     */
;;;490    uint32_t UART_Write(UART_T* uart, uint8_t *pu8TxBuf, uint32_t u32WriteBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;491    {
000002  4604              MOV      r4,r0
;;;492        uint32_t  u32Count, u32delayno;
;;;493    
;;;494        for(u32Count = 0; u32Count != u32WriteBytes; u32Count++)
000004  2000              MOVS     r0,#0
;;;495        {
;;;496            u32delayno = 0;
;;;497            while((uart->FSR & UART_FSR_TE_FLAG_Msk) == 0)   /* Wait Tx empty and Time-out manner */
;;;498            {
;;;499                u32delayno++;
;;;500                if(u32delayno >= 0x40000000)
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L17.38|
                  |L17.12|
00000c  2300              MOVS     r3,#0                 ;496
00000e  e004              B        |L17.26|
                  |L17.16|
000010  1c5b              ADDS     r3,r3,#1              ;497
000012  42ab              CMP      r3,r5
000014  d301              BCC      |L17.26|
;;;501                    return FALSE;
000016  2000              MOVS     r0,#0
;;;502            }
;;;503            uart->THR = pu8TxBuf[u32Count];    /* Send UART Data from buffer */
;;;504        }
;;;505    
;;;506        return u32Count;
;;;507    
;;;508    }
000018  bd70              POP      {r4-r6,pc}
                  |L17.26|
00001a  69a6              LDR      r6,[r4,#0x18]         ;497
00001c  00f6              LSLS     r6,r6,#3              ;497
00001e  d5f7              BPL      |L17.16|
000020  5c0b              LDRB     r3,[r1,r0]            ;503
000022  6023              STR      r3,[r4,#0]            ;503
000024  1c40              ADDS     r0,r0,#1              ;503
                  |L17.38|
000026  4290              CMP      r0,r2                 ;494
000028  d1f0              BNE      |L17.12|
00002a  bd70              POP      {r4-r6,pc}
;;;509    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REV16|
#line 118 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_uart_c_f12f5b44____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REVSH|
#line 132
|__asm___6_uart_c_f12f5b44____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
